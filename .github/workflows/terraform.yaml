name: Terraform
on:
  push:
    branches:
      - master
    paths:
      - 'tf/**'
  pull_request:

env:
  AWS_REGION: us-east-2
  TF_BUCKET: terraform-state
  TF_LOCK_TABLE: TerraformState

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tf
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: 'Configure AWS Credentials'
        id: aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.CI_AWS_ROLE_TO_ASSUME }}

      - name: 'Discover Terraform State'
        id: tfstate
        run: |
          bucket=$(aws s3 ls | grep ${{ env.TF_BUCKET }} | head -n1 | cut -d ' ' -f3)
          table=$(aws dynamodb list-tables --query 'TableNames[?contains(@,`${{ env.TF_LOCK_TABLE }}`)]' --output text | head -n1)
          echo "::set-output name=bucket::${bucket}"
          echo "::set-output name=table::${table}"

      - name: 'Install Terraform'
        uses: hashicorp/setup-terraform@v2

      - name: 'Prefix ENV'
        run: |
          for key in $(env | grep GITHUB_ | cut -d= -f1); do
            echo "TF_VAR_${key,,}=${!key}" >> $GITHUB_ENV
          done

      - name: 'Terraform Init'
        id: init
        run: |
          terraform init \
            -backend-config=bucket=${{ steps.tfstate.outputs.bucket }} \
            -backend-config=dynamodb_table=${{ steps.tfstate.outputs.table }} \
            -backend-config=region=${{ env.AWS_REGION }} \
            -backend-config=key=${{ github.repository }}

      - name: 'Terraform Format'
        id: fmt
        run: terraform fmt -check

      - name: 'Terraform Validate'
        id: validate
        run: terraform validate -no-color

      - name: 'Terraform Plan'
        id: plan
        run: terraform plan -no-color

      - name: 'Find Comment'
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Terraform Plan
      - name: 'Comment Plan Out'
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.PAT }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Terraform Format and Style ${{ steps.fmt.outcome }}
            Terraform Initialization ${{ steps.init.outcome }}
            Terraform Validation ${{ steps.validate.outputs.stdout }}
            Terraform Plan ${{ steps.plan.outcome }}

            <details><summary>Show Plan</summary>

            ```${{ steps.plan.outputs.stdout }}```

            </details>

      - name: 'Terraform Apply'
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve
